services:
  postgres:
    image: postgres:15-alpine
    container_name: auth_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: auth_backend
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - '5432:5432'
    networks:
      - auth_network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: auth_redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - '6379:6379'
    networks:
      - auth_network
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: auth_backend
    restart: unless-stopped
    env_file:
      - ./backend/.env
    environment:
      - NODE_ENV=production
      - PORT=4002
      - REDIS_URL=redis://redis:6379
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USERNAME=postgres
      - DB_PASSWORD=password
      - DB_NAME=auth_backend
    ports:
      - '4002:4002'
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - auth_network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: auth_frontend
    restart: unless-stopped
    ports:
      - '80:80'
    depends_on:
      - backend
    networks:
      - auth_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  auth_network:
    driver: bridge
